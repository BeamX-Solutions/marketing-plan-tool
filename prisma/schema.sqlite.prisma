// SQLite version for quick testing - copy over schema.prisma if you want to use SQLite

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  businessName        String?
  industry            String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  lastLoginAt         DateTime?
  marketingConsent    Boolean   @default(false)
  profileData         String?   // JSON as string in SQLite
  subscriptionStatus  String    @default("free")
  
  plans               Plan[]
  accounts            Account[]
  sessions            Session[]
  
  @@map("users")
}

model Plan {
  id                      String    @id @default(cuid())
  userId                  String
  businessContext         String    // JSON as string in SQLite
  questionnaireResponses  String    // JSON as string in SQLite
  claudeAnalysis          String?   // JSON as string in SQLite
  generatedContent        String?   // JSON as string in SQLite
  planMetadata            String?   // JSON as string in SQLite
  status                  String    @default("in_progress")
  completionPercentage    Int       @default(0)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  completedAt             DateTime?
  
  user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  claudeInteractions      ClaudeInteraction[]
  
  @@map("plans")
}

model ClaudeInteraction {
  id                String    @id @default(cuid())
  planId            String
  interactionType   String
  promptData        String    // JSON as string in SQLite
  claudeResponse    String    // JSON as string in SQLite
  tokensUsed        Int?
  processingTimeMs  Int?
  createdAt         DateTime  @default(now())
  
  plan              Plan      @relation(fields: [planId], references: [id], onDelete: Cascade)
  
  @@map("claude_interactions")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}